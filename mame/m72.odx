# Define compilation type
#OSTYPE=msys
#OSTYPE=oda320
OSTYPE=gcw0
LIBSPMP8K=c:/msys64/home/user/pmp/libspmp8k
include $(LIBSPMP8K)/main.cfg

ifeq ($(TARGET),)
TARGET = m72
# TARGET = neomame
endif

# set this the operating system you're building for
# (actually you'll probably need your own main makefile anyways)
# MAMEOS = msdos
MAMEOS = odx

# extension for executables
# EXE = .exe
EXE =

# CPU core include paths
VPATH=src $(wildcard src/cpu/*)

# define regarding OS, which compiler, linker and utilities to use
ifeq "$(OSTYPE)" "msys"	
TOOLCHAIN = c:/Msys64/mingw32
CC          = gcc
CPP         = gcc
LD          = gcc
else

ifeq "$(OSTYPE)" "gcw0"	
TOOLCHAIN = 
else
TOOLCHAIN = /opt/opendingux-toolchain/usr
endif

CC = arm-none-eabi-gcc
CPP =arm-none-eabi-gcc
LD = arm-none-eabi-gcc
OBJCOPY=arm-none-eabi-objcopy
MKBING= c:/msys64/home/user/pmp/libspmp8k/tools/bingtools/mkbing.exe 
endif

MD = @mkdir
RM = @rm -f
CP = @cp
MV = @mv
DEVLIBS =

EMULATOR = $(TARGET)$(EXE)
#-DMAME_UNDERCLOCK 
DEFS =  -DLSB_FIRST -D__ODX__  -DALIGN_INTS -DALIGN_SHORTS -DINLINE="static inline" -Dasm="__asm__ __volatile__"  -DMAME_FASTSOUND -DENABLE_AUTOFIRE -DBIGCASE

W_OPTS = -Wall -Wno-write-strings -Wno-sign-compare
#-ffunction-sections -ffast-math
ifeq "$(OSTYPE)" "msys"
F_OPTS = -fomit-frame-pointer  -fsingle-precision-constant -fsigned-char -fpermissive -Wno-narrowing
CFLAGS = -O2 -Isrc -Isrc/$(MAMEOS) -Isrc/zlib $(W_OPTS) $(F_OPTS)
CFLAGS += -g

LIB_PATH  = $(TOOLCHAIN)/lib
LIBS      = -Lc:/msys64/home/user/pmp/libspmp8k/libgame -lstdc++ -lSDLg -lgame -lpng -lz -lm 
LDFLAGS = $(CFLAGS) -L$(LIB_PATH) $(LIBS) 
else
#F_OPTS =  -funroll-loops -fomit-frame-pointer -ffast-math -fsingle-precision-constant -fpermissive -fsigned-char -fno-exceptions -fno-rtti

F_OPTS = -fpermissive -falign-functions -falign-loops -falign-labels -falign-jumps \
	-ffast-math -fsingle-precision-constant -funsafe-math-optimizations \
	-fomit-frame-pointer -fno-builtin -fno-exceptions -fno-common \
	-fstrict-aliasing  -fexpensive-optimizations -fno-pic \
	-finline -finline-functions -fmerge-all-constants \
	-ftree-vectorize -fweb -frename-registers

ifeq "$(OSTYPE)" "gcw0"	
CFLAGS = -D_GCW0_  -Wno-narrowing -O3 -march=armv5t -mtune=arm926ej-s -Isrc -Ic:/msys64/home/user/pmp/libspmp8k/include -Isrc/$(MAMEOS) -Isrc/zlib -msoft-float $(W_OPTS) $(F_OPTS)
else
CFLAGS = -D_GCW0_  -O3 -march=armv5t -mtune=arm926ej-s-Isrc -Isrc/$(MAMEOS) -Isrc/zlib -msoft-float  $(W_OPTS) $(F_OPTS)
endif
#CFLAGS += -g
LIB_PATH  = c:/msys64/home/user/pmp/libspmp8k/libgame
LDSCRIPT= $(LIB_PATH)/libgame.ld

#LIBS      = -lSDL -lpthread -lm -lgcc -lstdc++ -T$(LDSCRIPT)
LIBS      = -Lc:/msys64/home/user/pmp/libspmp8k/libgame -lSDLg -lgame -lpng -lm -lz  -lc -lgcc -lstdc++  -lnosys 
LDFLAGS =  -L$(LIBGAME) -L$(NEWLIB)/lib -L$(3RDPARTY)/lib -march=armv5t -msoft-float -nostartfiles -T$(LDSCRIPT)
#LDFLAGS = -Wl,--gc-sections -Wl,-s
endif

OBJ = obj_$(TARGET)_$(MAMEOS)
OBJDIRS = $(OBJ) $(OBJ)/cpu $(OBJ)/sound $(OBJ)/$(MAMEOS) \
	$(OBJ)/drivers $(OBJ)/machine $(OBJ)/vidhrdw $(OBJ)/sndhrdw \
	$(OBJ)/zlib
#OBJS= $(OBJ)
all: maketree $(EMULATOR)

# include the various .mak files
include src/core.mak
include src/$(TARGET).mak
include src/rules.mak
include src/sound.mak
#include src/tiny.mak
include src/$(MAMEOS)/$(MAMEOS).mak
#include $(LIBGAME)/libgame.mk
# combine the various definitions to one
CDEFS = $(DEFS) $(COREDEFS) $(CPUDEFS) $(SOUNDDEFS)

$(EMULATOR): $(COREOBJS) $(OSOBJS) $(DRVOBJS) 
	$(LD) $(LDFLAGS) $(COREOBJS) $(OSOBJS) $(OBJNAMCO) $(DRVOBJS) $(LIBS) -o $@
	$(MV) $(EMULATOR) distrib/mame4all/$(EMULATOR)
	$(OBJCOPY) -S -O binary distrib/mame4all/$(EMULATOR) distrib/mame4all/$(EMULATOR).2
	$(MKBING) distrib/mame4all/$(EMULATOR).2 distrib/mame4all/$(EMULATOR).bin

$(EMULATOR).dge: $(FEOBJS)
	@echo Linking $@ ...
	$(LD) $(LDFLAGS) $(FEOBJS) $(LIBS) -o $@
ifeq "$(OSTYPE)" "msys"
	$(MV) $(EMULATOR).dge distrib/mame4all/$(EMULATOR).dge.exe
else
	$(MV) $(EMULATOR).dge distrib/mame4all/$(EMULATOR).dge
endif

$(OBJ)/%.o: src/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@

$(OBJ)/%.o: src/%.cpp
	@echo Compiling $<...
	$(CPP) $(CDEFS) $(CFLAGS) -fno-rtti -c $< -o $@

$(OBJ)/%.o: src/%.s
	@echo Compiling $<...
	$(CPP) $(CDEFS) $(CFLAGS) -c $< -o $@

$(OBJ)/%.o: src/%.S
	@echo Compiling $<...
	$(CPP) $(CDEFS) $(CFLAGS) -c $< -o $@

$(sort $(OBJDIRS)):
	$(MD) $@

maketree: $(sort $(OBJDIRS))

clean:
	$(RM) -r $(OBJ)
	$(RM) $(EMULATOR)
